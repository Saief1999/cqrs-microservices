version: '2'

services:
  registry-server:
    build:
      context: ./registry-server
      dockerfile: Dockerfile
    container_name: registry-server
    expose:
      - "8761"
    ports:
      - "8761:8761"
    networks:
      - spring-cqrs-network

  configuration-server:
    build:
      context: ./configuration-server
      dockerfile: Dockerfile
    container_name: configuration-server
    ports:
      - "8888:8888"
    depends_on:
      - registry-server
    environment:
      eureka.client.serviceUrl.defaultZone: http://registry-server:8761/eureka
    networks:
      - spring-cqrs-network

  search-microservice:
    build:
      context: ./search-microservice
      dockerfile: Dockerfile
    container_name: search-microservice
    ports:
      - "8086:8086"
    depends_on:
      - configuration-server
      - redis-server
      - kafka-server
      - es-server
    environment:
      eureka.client.serviceUrl.defaultZone: http://registry-server:8761/eureka
#      spring.config.import: "optional:configuration-server:"
      spring.cloud.config.fail-fast: "true"
      spring.cloud.config.retry.max-attemps: 20
      spring.cloud.config.retry.max-interval: 15000
      spring.cloud.config.retry.initial-interval: 10000
      spring.cloud.config.discovery.enabled: "true"
      eureka.client.enabled: "true"
      eureka.client.register-with-eureka: "true"
      eureka.client.fetch-registry: "true"
      spring.cloud.config.discovery.service-id: configuration-server
      spring.kafka.bootstrap-servers: kafka-server:9092
      spring.redis.host: redis-server
      spring.data.elasticsearch.cluster-nodes: es-server:9200
    networks:
      - spring-cqrs-network

  upsert-microservice:
    build:
      context: ./upsert-microservice
      dockerfile: Dockerfile
    container_name: upsert-microservice
    ports:
      - "8085:8085"
    depends_on:
      - configuration-server
      - kafka-server
    environment:
      eureka.client.serviceUrl.defaultZone: http://registry-server:8761/eureka
      spring.cloud.config.fail-fast: "true"
      spring.cloud.config.retry.max-attemps: 20
      spring.cloud.config.retry.max-interval: 15000
      spring.cloud.config.retry.initial-interval: 10000
      spring.cloud.config.discovery.enabled: "true"
      eureka.client.enabled: "true"
      eureka.client.register-with-eureka: "true"
      eureka.client.fetch-registry: "true"
      spring.cloud.config.discovery.service-id: configuration-server
      spring.kafka.bootstrap-servers: kafka-server:9092
    networks:
      - spring-cqrs-network

  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    container_name: gateway-service
    ports:
      - "8082:8082"
    depends_on:
      - upsert-microservice
      - search-microservice
    environment:
      eureka.client.serviceUrl.defaultZone: http://registry-server:8761/eureka
    networks:
      - spring-cqrs-network

  redis-server:
    container_name: redis
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - spring-cqrs-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - spring-cqrs-network

#  kafka-server:
#    image: confluentinc/cp-kafka:latest
#    depends_on:
#      - zookeeper
#    ports:
#      - "29092:29092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-server:9092,PLAINTEXT_HOST://localhost:29092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#    networks:
#      - spring-cqrs-network


  kafka-server:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-server
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-server:9092,OUTSIDE://localhost:29092
      KAFKA_ADVERTISED_HOST_NAME: kafka-server
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
      - spring-cqrs-network


  es-server:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=local-cluster
      - bootstrap.memory_lock=true
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - spring-cqrs-network

volumes:
  data01:
    driver: local

networks:
  spring-cqrs-network:
    driver: bridge